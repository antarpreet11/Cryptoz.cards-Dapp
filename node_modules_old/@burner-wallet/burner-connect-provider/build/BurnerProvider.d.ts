/// <reference types="node" />
import { EventEmitter } from 'events';
import HubBridge from './HubBridge';
import WalletBridge from './WalletBridge';
export interface Wallet {
    origin: string;
    name: string;
}
interface ConstructorProps {
    hubUrl?: string;
    defaultNetwork?: string;
    defaultWallets?: Wallet[];
}
export default class BurnerProvider extends EventEmitter {
    isBurnerProvider: boolean;
    hub: HubBridge;
    connected: boolean;
    walletBridge: WalletBridge | null;
    wallet: any;
    network: string;
    private _nextJsonRpcId;
    private walletSelector;
    private defaultWallets;
    constructor({ hubUrl, defaultNetwork, defaultWallets, }?: ConstructorProps);
    setNetwork(network: string): void;
    getAssets(): Promise<unknown>;
    enable(): Promise<unknown>;
    showPrompt(): Promise<void>;
    needsPopup(): Promise<boolean>;
    showPopup(): Promise<void>;
    send(method: string, params?: any[]): Promise<unknown> | Error;
    sendAsync(payload: any, cb: any): void;
    getBridge(): WalletBridge;
}
export {};
